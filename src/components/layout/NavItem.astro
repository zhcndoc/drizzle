---
interface Props {
  value: string;
  href: string;
  activeKeywords: string[];
}

const { value, href, activeKeywords } = Astro.props;
const { pathname } = Astro.url;

const isActive = activeKeywords && activeKeywords.some((keyword) => pathname.startsWith(keyword));
---

<a href={href} data-active-keywords={activeKeywords} class:list={['item_wrap', isActive && 'item_wrap_active']}>
  {value}
</a>

<style>
  html[class~='dark'] .item_wrap {
    color: #e1e3e6;
    background-color: #111;
    border-color: #404040;
  }

  html[class~='dark'] .item_wrap:hover {
    background-color: rgba(255, 255, 255, 0.05);
    border-color: #686868;
  }

  html[class~='dark'] .item_wrap_active {
    color: rgb(243, 244, 246);
  }

  .item_wrap {
    background-color: hsla(210, 7%, 95%, 0.27);
    border: 1px solid rgba(33, 39, 46, 0.12);
  }

  .item_wrap,
  .item_wrap_active {
    display: flex;
    align-items: center;
    text-decoration: inherit;
    outline-offset: 2px;
    outline: 2px solid transparent;
    border-radius: 8px;
    position: relative;
    white-space: nowrap;
    padding: 0 10px;
    height: 36px;
    font-weight: 500;
    font-size: 14px;
    color: rgb(75, 85, 99);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .item_wrap:hover {
    color: #000;
    border-color: #b8bfc8;
  }

  .item_wrap_active {
    color: rgb(0, 0, 0);
    font-weight: 500;
  }
</style>

<script>
  const navItems = document.querySelectorAll('[data-active-keywords]');
  const handleUrlChange = () => {
    const currentUrl = window.location.href;
    navItems.forEach((item) => {
      if (item instanceof HTMLElement) {
        const activeKeywords = item.dataset.activeKeywords?.split(',');
        const isActive = activeKeywords && activeKeywords.some((keyword) => currentUrl.includes(keyword));
        item.classList.toggle('item_wrap_active', isActive);
      }
    });
  };
  window.addEventListener('hashchange', handleUrlChange);
  document.addEventListener('DOMContentLoaded', handleUrlChange);
</script>
