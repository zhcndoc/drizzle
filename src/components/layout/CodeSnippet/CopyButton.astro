---
interface Props {
  forTitle?: boolean;
}

const { forTitle } = Astro.props;
---

<button
  data-copy-btn
  type="button"
  class:list={["button-wrap", forTitle && "button-wrap--title"]}
  data-for-title={forTitle?.toString()}
  aria-label="Copy"
>
  <svg
    viewBox="0 0 20 20"
    width="1em"
    height="1em"
    fill="currentColor"
    class="hidden"
  >
    <path
      fill-rule="evenodd"
      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
      clip-rule="evenodd"></path>
  </svg>
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    stroke="currentColor"
  >
    <rect
      x="9"
      y="9"
      width="13"
      height="13"
      rx="2"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></rect>
    <path
      d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
</button>
<style>
  html[class~="dark"] .button-wrap:hover {
    color: #c4c5c6;
    border-color: #555;
  }
  html[class~="dark"] .button-wrap {
    border-color: #292929;
    background-color: #222;
    color: #909090;
  }

  .button-wrap:hover {
    color: #111827;
  }

  .button-wrap {
    border: 1px solid rgba(33, 39, 46, .12);
    border-radius: 2px;
    backdrop-filter: blur(12px);
    cursor: pointer;
    text-transform: none;
    font-size: 100%;
    outline-offset: 2px;
    outline: 2px solid transparent;
    -webkit-transition-property: all;
    -o-transition-property: all;
    transition-property: all;
    -webkit-transition-duration: 0.15s;
    -o-transition-duration: 0.15s;
    transition-duration: 0.15s;
    -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -o-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    padding: 0.375rem;
    background-color: #f5f5f5;
    color: rgba(75, 85, 99, 0.6);
    z-index: 99;
    opacity: 0;
  }

  .button-wrap--title {
    position: static;
    margin: 0;
    opacity: 1;
  }

  .button-wrap svg {
    width: 16px;
    height: 16px;
    pointer-events: none;
  }
</style>
<script>
  document.addEventListener("astro:page-load", () => {
    const copyBtn = document.querySelectorAll(
      "[data-copy-btn]",
    ) as NodeListOf<HTMLElement>;
    copyBtn.forEach((n) => {
      n.addEventListener("click", () => {
        let timeouts: NodeJS.Timeout[] = [];
        const isForTitle = n.dataset.forTitle === "true";
        const parentSnippet = n.closest(".code-snippet");
        if (!parentSnippet) return;
        const { textContent } = parentSnippet.querySelector(".btn-container")!
          .nextElementSibling as HTMLElement;
        if (!textContent) return;
        navigator.clipboard.writeText(textContent);
        if (timeouts.length) {
          timeouts.forEach((id) => {
            clearTimeout(id);
          });
        }

        n.style.opacity = "1";
        n.children[0].classList.remove("hidden");
        n.children[1].classList.add("hidden");

        timeouts.push(
          setTimeout(() => {
            n.style.opacity = "";
          }, 1500),
        );

        timeouts.push(
          setTimeout(() => {
            n.children[0].classList.add("hidden");
            n.children[1].classList.remove("hidden");
          }, 2000),
        );
      });
    });
  })
</script>
